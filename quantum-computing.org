#+LATEX_HEADER: \usepackage{amsmath}
* Quantum Computing - Conceptual Introduction
** Preliminaries - What Is QC?
*** Building Blocks
**** Qubits
     - Short for =quantum bits=.
     - Just like classical bits they need a well-defined physical
       representation, of which there are many (e.g. photonic
       polarization, electron spin, nuclear spin, Josephson junction,
       ion trap, etc.)
     - Unlike classical bits, they exist in a quantum superposition of
       available basis states (more on this later)
     - On the computational level we operate on =logical qubits=,
       which can comprise up to 1000 physical qubits (depending on the
       quantum error correction scheme)
     - An array of qubits is typically referred to as a =quantum
       register=
**** Quantum Gates
     - QC analogues of logic gates
     - Mathematically they are represented by =unitary= matrices (more
       on this later)
     - Unlike logic gates in classical computing, they are reversible
       (cf. Feynman's and Fredkin's remarks on classical
       reversibility)
     - n-qubit gate is represented by a $2^n \times 2^n$ unitary matrix
       (this dimensionality results from the properties of tensor products)
     - Quantum gates can transform single or multiple qubits, conflate
       several qubits with each other (quantum entanglement),
       conditionalize certain actions, etc.
**** Measurement
     - Irreversible operation on a qubit or quantum register
     - Measurements are performed relative to a basis of base vectors
     - Measurement can only yield one of the constituent =pure states=
       (i.e. in the case of an already pure state the result will be
       known in advance)
     - The probability of arriving at a pure state is proportional to
       the squared modulus of its (complex) amplitude (more on this
       later)
**** Ancillary qubits
     - Because reversibility sometimes requires outputting additional
       information, it may be necessary to use additional, so called
       =ancillary= qubits, which will store this information and can
       later be discarded.
     - Because sometimes the ancillary qubits get entangled with the
       main thread of computation, it is not always possible to just
       discard them. In such cases one might need to perform
       =uncomputation=, which is a unitary way to =undo= the
       entanglement.
**** Decoherence
     - Unwanted, but unavoidable (?) interference between
       computational elements (qubits) and their (quantum-mechanical)
       surroundings
     - Decoherence boils down to physical qubits getting entangled
       with the environment
     - Attempts to limit decoherence involve cryogenic environments,
       shielding, quantum error correction, etc.
*** Mathematics of QC
**** Basic postulates of Quantum Mechanics
**** Mathematical concepts
***** Ket (vector)
      - An ordinary vector can be represented sybolically as a =ket=
        (after Dirac)
      - Notational equivalence: 
      $$|a\rangle \equiv \begin{bmatrix}
      a_1\\
      a_2\\
      \vdots\\
      a_n\\
      \end{bmatrix}
      $$
***** Bra (covector)
      - An object dual to a vector (a =covector= or =form=) can be
        represented sybolically as a =bra=
      - Hermitian conjugate is the conversion operation between bras
        and kets
      - Notational equivalence:
      $$\langle a| \equiv {|a\rangle}^\dagger \equiv \begin{bmatrix}
      a_1\\
      a_2\\
      \vdots\\
      a_n\\
      \end{bmatrix}^\dagger \equiv \begin{bmatrix} a_1^* & a_2^* & \cdots & a_n^*\end{bmatrix}
      $$
***** Hermitian adjoint (or conjugate)
      - A combination of matrix transposition and taking complex
        conjugates of all its elements: $A^\dagger = (A^T)^* =
        (A^*)^T$
***** Unitarity
      - A matrix is unitary when $AA^\dagger = A^\dagger A = I$
      - Unitary matrices preserve vector lengths and are thus
        generalizations of rotations $\langle a A|A a\rangle = \langle
        a|A^\dagger A|a\rangle = \langle a|I|a\rangle = \langle
        a|a\rangle$
      - All quantum gates satisfy this property
      - Unitary matrices have eigenvalues of modulus $1$ (shown [[https://math.stackexchange.com/questions/1717713/show-that-the-eigenvalues-of-a-unitary-matrix-have-modulus-1][here]])
***** Hermiticity (self-adjointedness)
      - A Hermitian (self-adjoint) matrix is identical to its
        Hermitian conjugate
      - All eigenvalues of a Hermitian matrix are real
      - Because of the above, physical observables (i.e. measurable
        properties of a system) are represented as Hermitian operators
*** Examples of Quantum Circuits
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522X%2522,%2522X%2522%5D%5D,%2522init%2522:%5B0,1%5D}][NOT gate]] 
     Acting on two separate qubits set to $|0\rangle$ and $|1\rangle$
     respectively.
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522H%2522%5D%5D}][Hadamard gate]]
     Converting a pure state into a superposition
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522H%2522%5D,%5B%2522H%2522%5D%5D}][2 Hadamard gates]]
     ... and back again
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522%25E2%2580%25A2%2522,%2522X%2522%5D%5D}][CNOT gate]]
     Controlled NOT
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522H%2522%5D,%5B%2522%25E2%2580%25A2%2522,%2522X%2522%5D%5D}][Bell state]]
     Simplest instance of quantum entanglement
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522Swap%2522,%2522Swap%2522%5D%5D,%2522init%2522:%5B0,1%5D}][SWAP gate]]
     Exchange two qubits connected by the gate
**** [[https://algassert.com/quirk#circuit={%2522cols%2522:%5B%5B%2522Z%2522,%2522Z%2522%5D%5D,%2522init%2522:%5B0,1%5D}][Z gate]]
     Negates the $|1\rangle$ state
** Useful Resources
*** Quantum Programming Languages
**** [[https://docs.microsoft.com/en-us/quantum/][Q# and Quantum Development Kit]]
     QPL designed by Microsoft. The QDK contains a quantum simulator
     and many useful debugging tools. Q# programs are embedded within
     C# code, which handles the non-quantum part.
**** [[https://qiskit.org/][Qiskit]]
     QPL by IBM. Reasonably mature programming environment, heavy
     integration with Jupyter notebooks, lots of high-quality
     introductory material.
**** [[https://pyquil-docs.rigetti.com/en/stable/][PyQuil and Forest SDK]]
     QPL build by Rigetti Computing. Embeds quantum computations
     within ordinary Python code. Unlike Q# it's more of a library
     than separate language. Facilitates experiments with 
**** [[https://www.mathstat.dal.ca/~selinger/quipper/][Quipper]]
     A QPL embedded in Haskell. Aspects of quantum computation, such
     as measurement, are represented as monadic types (cf. our
     conversation at Luigi's Lucky Leprechaun)
*** Circuit Visualization
**** [[https://algassert.com/quirk][Quirk]]
     Simple and intuitive quantum circuit visualizer. Good to untangle
     (hehe...) conceptual confusion that sometimes arises when working
     on a problem.
*** Blogs
**** [[https://www.scottaaronson.com/blog/][Shtetl-Optimized]]
     Scientific blog by Scott Aaronson. Lots of explanations,
     discussions and pointers to other resources.
*** Books & Lecture Notes
**** [[https://www.cambridge.org/pl/academic/subjects/physics/quantum-physics-quantum-information-and-quantum-computation/quantum-computation-and-quantum-information-10th-anniversary-edition?format=HB&isbn=9781107002173][Michael Nielsen, Isaac Chuang - Quantum Computation and Quantum Information]]
     In-depth introduction to QC concepts and discussion of physical
     implementations.
**** [[https://www.amazon.com/Quantum-Computing-since-Democritus-Aaronson/dp/0521199565][Scott Aaronson - Quantum Computing Since Democritus]]
     Slightly humorous and heavily philosophical take on QC and
     complexity theory.
**** [[https://www.springer.com/gp/book/9783030239213][Jack Hidary - Quantum Computing: An Applied Approach]]
     Slightly more accessible than "Mike & Ike". Not as in-depth.
**** [[http://theory.caltech.edu/~preskill/ph229/][John Preskill - Lecture Notes for Phys 219/CS 219 - Quantum Computation]]
     Well-written, but technical introduction to the topic.
*** Podcasts
**** [[https://lexfridman.com/scott-aaronson/][Lex Fridman - Scott Aaronson]]
**** [[https://lexfridman.com/leonard-susskind/][Lex Fridman - Leonard Susskind]]
**** [[https://blog.ycombinator.com/john-preskill-on-quantum-computing/][Y Combinator Podcast - John Preskill]]
**** [[https://blog.ycombinator.com/scott-aaronson-on-computational-complexity-theory-and-quantum-computers/][Y Combinator Podcast - Scott Aaronson]]
**** [[https://blog.ycombinator.com/leonard-susskind-on-richard-feynman-the-holographic-principle-and-unanswered-questions-in-physics/][Y Combinator Podcast - Leonard Susskind]]
**** [[https://blog.ycombinator.com/simon-benjamin-on-architectures-for-quantum-computing/][Y Combinator Podcast - Simon Benjamin]]
     Discussion of various types of QC architectures
*** Miscellaneous
**** [[https://quantumkoans.com/][Quantum Koans]]
     Half-tongue-in-cheek, half-serious musings on the nature of QM
**** [[https://github.com/microsoft/QuantumKatas][Microsoft Quantum Katas]]
     A koan-like approach to teaching QC and Q#
